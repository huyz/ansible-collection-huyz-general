---
name: Ansible Molecule

on:
  push:
    branches:
        - master
  pull_request:
  schedule:
    - cron: "10 10 * * SUN"
  workflow_dispatch:

env:
  # https://www.jeffgeerling.com/blog/2020/getting-colorized-output-molecule-and-ansible-on-github-actions-ci
  PY_COLORS: '1'
  ANSIBLE_FORCE_COLOR: '1'

jobs:
  check-needs-run:
    runs-on: ubuntu-latest
    outputs:
      needs_run: ${{ steps.check-event.outputs.changed_all == 'true' || steps.changes.outputs.ansible == 'true' }}
    steps:
      # TODO: is there an easier way to do this?
      - name: Determine if we apply to all files
        id: check-event
        if: contains(fromJSON('["schedule", "workflow_dispatch"]'), github.event_name)
        run: echo "changed_all=true" >> "$GITHUB_OUTPUT"

      - name: Check for changes in relevant files
        id: changes
        if: steps.check-event.outputs.changed_all != 'true'
        uses: dorny/paths-filter@v2
        with:
          filters: .github/paths-filter.yml

  ansible-molecule:
    needs: check-needs-run
    if: needs.check-needs-run.outputs.needs_run

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          #- centos:8
          #- debian:10
          #- fedora:34
          #- oraclelinux:8
          - ubuntu:22.04

        role:
          - add_to_config_file

    steps:
      # XXX Apparently, "For pull requests it's not necessary to checkout the code"
      - uses: actions/checkout@v3
        if: github.event_name != 'pull_request'

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.x
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.1'   # avoid warning in logs
          cache: 'poetry'

      - name: Poetry install packages
        run: poetry install

      - name: Run Ansible Molecule
        id: molecule
        uses: gofrolist/molecule-action@v2
        with:
          molecule_working_dir: roles/${{ matrix.role }}
        env:
          MOL_IMAGE: ${{ matrix.image }}
